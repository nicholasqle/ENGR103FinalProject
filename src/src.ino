#include <Adafruit_CircuitPlayground.h>
int arraySize, wrongGuesses, currentReading, score, touchedPad; //initialize variables used for gameplay
bool gameRunning, padTouched; //status bools for gameplay 
bool ResetFlag=0; //Flag for reset button interrupt
bool FinishFlag=0; //Flag for finish button interrupt
const byte interruptButtonLeft = 4; //Assign left button
const byte interruptButtonRight = 5; //Assign right button
int pads[] = {6, 9, 10, 3, 2, 0, 1}; //Converts analog pin number to digital pin for A1 to A7.
int numbers[10]; //Array where random numbers will be stored

//The below speech was pulled from the Speech_Demos located in Adafruit Circuit Playground library. The original credits are as follows:
// Talkie library
// Copyright 2011 Peter Knight
// This code is released under GPLv2 license.
//
const uint8_t spONE[]       PROGMEM = {0xCC,0x67,0x75,0x42,0x59,0x5D,0x3A,0x4F,0x9D,0x36,0x63,0xB7,0x59,0xDC,0x30,0x5B,0x5C,0x23,0x61,0xF3,0xE2,0x1C,0xF1,0xF0,0x98,0xC3,0x4B,0x7D,0x39,0xCA,0x1D,0x2C,0x2F,0xB7,0x15,0xEF,0x70,0x79,0xBC,0xD2,0x46,0x7C,0x52,0xE5,0xF1,0x4A,0x6A,0xB3,0x71,0x47,0xC3,0x2D,0x39,0x34,0x4B,0x23,0x35,0xB7,0x7A,0x55,0x33,0x8F,0x59,0xDC,0xA2,0x44,0xB5,0xBC,0x66,0x72,0x8B,0x64,0xF5,0xF6,0x98,0xC1,0x4D,0x42,0xD4,0x27,0x62,0x38,0x2F,0x4A,0xB6,0x9C,0x88,0x68,0xBC,0xA6,0x95,0xF8,0x5C,0xA1,0x09,0x86,0x77,0x91,0x11,0x5B,0xFF,0x0F};
const uint8_t spTWO[]       PROGMEM = {0x0E,0x38,0x6E,0x25,0x00,0xA3,0x0D,0x3A,0xA0,0x37,0xC5,0xA0,0x05,0x9E,0x56,0x35,0x86,0xAA,0x5E,0x8C,0xA4,0x82,0xB2,0xD7,0x74,0x31,0x22,0x69,0xAD,0x1C,0xD3,0xC1,0xD0,0xFA,0x28,0x2B,0x2D,0x47,0xC3,0x1B,0xC2,0xC4,0xAE,0xC6,0xCD,0x9C,0x48,0x53,0x9A,0xFF,0x0F};
const uint8_t spTHREE[]     PROGMEM = {0x02,0xD8,0x2E,0x9C,0x01,0xDB,0xA6,0x33,0x60,0xFB,0x30,0x01,0xEC,0x20,0x12,0x8C,0xE4,0xD8,0xCA,0x32,0x96,0x73,0x63,0x41,0x39,0x89,0x98,0xC1,0x4D,0x0D,0xED,0xB0,0x2A,0x05,0x37,0x0F,0xB4,0xA5,0xAE,0x5C,0xDC,0x36,0xD0,0x83,0x2F,0x4A,0x71,0x7B,0x03,0xF7,0x38,0x59,0xCD,0xED,0x1E,0xB4,0x6B,0x14,0x35,0xB7,0x6B,0x94,0x99,0x91,0xD5,0xDC,0x26,0x48,0x77,0x4B,0x66,0x71,0x1B,0x21,0xDB,0x2D,0x8A,0xC9,0x6D,0x88,0xFC,0x26,0x28,0x3A,0xB7,0x21,0xF4,0x1F,0xA3,0x65,0xBC,0x02,0x38,0xBB,0x3D,0x8E,0xF0,0x2B,0xE2,0x08,0xB7,0x34,0xFF,0x0F};
const uint8_t spFOUR[]      PROGMEM = {0x0C,0x18,0xB6,0x9A,0x01,0xC3,0x75,0x09,0x60,0xD8,0x0E,0x09,0x30,0xA0,0x9B,0xB6,0xA0,0xBB,0xB0,0xAA,0x16,0x4E,0x82,0xEB,0xEA,0xA9,0xFA,0x59,0x49,0x9E,0x59,0x23,0x9A,0x27,0x3B,0x78,0x66,0xAE,0x4A,0x9C,0x9C,0xE0,0x99,0xD3,0x2A,0xBD,0x72,0x92,0xEF,0xE6,0x88,0xE4,0x45,0x4D,0x7E,0x98,0x2D,0x62,0x67,0x37,0xF9,0xA1,0x37,0xA7,0x6C,0x94,0xE4,0xC7,0x1E,0xDC,0x3C,0xA5,0x83,0x1F,0x8B,0xEB,0x52,0x0E,0x0E,0x7E,0x2E,0x4E,0xC7,0x31,0xD2,0x79,0xA5,0x3A,0x0D,0xD9,0xC4,0xFF,0x07};
const uint8_t spFIVE[]      PROGMEM = {0x02,0xE8,0x3E,0x8C,0x01,0xDD,0x65,0x08,0x60,0x98,0x4C,0x06,0x34,0x93,0xCE,0x80,0xE6,0xDA,0x9A,0x14,0x6B,0xAA,0x47,0xD1,0x5E,0x56,0xAA,0x6D,0x56,0xCD,0x78,0xD9,0xA9,0x1C,0x67,0x05,0x83,0xE1,0xA4,0xBA,0x38,0xEE,0x16,0x86,0x9B,0xFA,0x60,0x87,0x5B,0x18,0x6E,0xEE,0x8B,0x1D,0x6E,0x61,0xB9,0x69,0x36,0x65,0xBA,0x8D,0xE5,0xE5,0x3E,0x1C,0xE9,0x0E,0x96,0x9B,0x5B,0xAB,0x95,0x2B,0x58,0x6E,0xCE,0xE5,0x3A,0x6A,0xF3,0xB8,0x35,0x84,0x7B,0x05,0xA3,0xE3,0x36,0xEF,0x92,0x19,0xB4,0x86,0xDB,0xB4,0x69,0xB4,0xD1,0x2A,0x4E,0x65,0x9A,0x99,0xCE,0x28,0xD9,0x85,0x71,0x4C,0x18,0x6D,0x67,0x47,0xC6,0x5E,0x53,0x4A,0x9C,0xB5,0xE2,0x85,0x45,0x26,0xFE,0x7F};
const uint8_t spSIX[]       PROGMEM = {0x0E,0xD8,0xAE,0xDD,0x03,0x0E,0x38,0xA6,0xD2,0x01,0xD3,0xB4,0x2C,0xAD,0x6A,0x35,0x9D,0xB1,0x7D,0xDC,0xEE,0xC4,0x65,0xD7,0xF1,0x72,0x47,0x24,0xB3,0x19,0xD9,0xD9,0x05,0x70,0x40,0x49,0xEA,0x02,0x98,0xBE,0x42,0x01,0xDF,0xA4,0x69,0x40,0x00,0xDF,0x95,0xFC,0x3F};
const uint8_t spSEVEN[]     PROGMEM = {0x02,0xB8,0x3A,0x8C,0x01,0xDF,0xA4,0x73,0x40,0x01,0x47,0xB9,0x2F,0x33,0x3B,0x73,0x5F,0x53,0x7C,0xEC,0x9A,0xC5,0x63,0xD5,0xD1,0x75,0xAE,0x5B,0xFC,0x64,0x5C,0x35,0x87,0x91,0xF1,0x83,0x36,0xB5,0x68,0x55,0xC5,0x6F,0xDA,0x45,0x2D,0x1C,0x2D,0xB7,0x38,0x37,0x9F,0x60,0x3C,0xBC,0x9A,0x85,0xA3,0x25,0x66,0xF7,0x8A,0x57,0x1C,0xA9,0x67,0x56,0xCA,0x5E,0xF0,0xB2,0x16,0xB2,0xF1,0x89,0xCE,0x8B,0x92,0x25,0xC7,0x2B,0x33,0xCF,0x48,0xB1,0x99,0xB4,0xF3,0xFF};
//End of speech
//

void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  CircuitPlayground.begin();
  pinMode(interruptButtonLeft, INPUT);
  pinMode(interruptButtonRight, INPUT);
  attachInterrupt(digitalPinToInterrupt(interruptButtonLeft),AbuttonISR,RISING);
  attachInterrupt(digitalPinToInterrupt(interruptButtonRight),BbuttonISR,RISING);
  arraySize = 1;
  arrayGenerator(arraySize);
  arrayReader();
}

void loop() {
  // put your main code here, to run repeatedly:
  //resets the game
  if (ResetFlag){
    delay(5);
    Serial.println("Game Reset");
    arraySize=1;
    currentReading = 0;
    wrongGuesses = 0;
    score=0;
    ResetFlag=0;
    gameRunning = 1;
    CircuitPlayground.clearPixels();
    arrayReader();
  }
  //Quits the game
  else if (FinishFlag){
    Serial.println("Quit Game");
    delay(5);
    gameRunning = 0;
    FinishFlag = 0;
    gameOver();
  }
//This is the main game logic code
      do{
        //Too many wrong guesses ends the game
        if (wrongGuesses==3){
          Serial.println("Too many wrong guesses");
          gameOver();
        }
        //Game is won if 10 numbers are correctly guessed in the 10th round
        else if (arraySize==11){
          Serial.println("More than 10 numbers guessed!");
          gameOver();
        }
        //exits the main game if finish or reset button is pressed
        else if (FinishFlag || ResetFlag){
          break;
        }
        //if a pad is touched, it is checked to see if it is the correct one.
        else if (padTouched){
          if (touchedPad==numbers[currentReading]){
            //correct press
            Serial.println("Correct");
            for (int i =0; i<10; i++){
              CircuitPlayground.setPixelColor(i, 0, 255, 0);
            }
            delay(500);
            currentReading += 1; //goes to the next number in the sequence
            wrongGuesses = 0;
            padTouched = 0;
            CircuitPlayground.clearPixels();
          }  
          else{
            //incorrect press
            Serial.println("Incorrect");
            for (int i =0; i<10; i++){
              CircuitPlayground.setPixelColor(i, 255, 0, 0);
            }
            delay(500);
            wrongGuesses += 1;
            if (wrongGuesses<3){arrayReader();}
            padTouched = 0;
            currentReading = 0;
            CircuitPlayground.clearPixels();
          }
        }
        // generates new number sequence after all numbers in corrent sequence are correct
        else if (currentReading > (arraySize-1)){
          score = arraySize;
          arraySize += 1;
          arrayGenerator(arraySize);
          currentReading = 0;
          if (arraySize<11){arrayReader();}
        }
        //Checks if a pad is touched
        else{
          for (int i=0; i<7; i++){
            if (CircuitPlayground.readCap(pads[i])>900){
            touchedPad = i+1; //registers what number was touched
            padTouched = 1; //sets flag that a pad was touched
            Serial.println("Touch Registered");
            Serial.println(touchedPad);
            }
          }
        }



      }
      while(gameRunning);








}














//function generates a random number sequence of certain size.
void arrayGenerator(int arraySize) {
  for (int i = 0; i < arraySize; i++) {
    randomSeed(analogRead(A0));
    numbers[i] = random(1, 7);
  }
}

//function goes through the sequence of numbers and reads it out loud using speech.
void arrayReader(){
  for (int i = 0; i < arraySize; i++) {
    switch(numbers[i]){
      case 1:
      CircuitPlayground.speaker.say(spONE);
      break;

      case 2:
      CircuitPlayground.speaker.say(spTWO);
      break;

      case 3:
      CircuitPlayground.speaker.say(spTHREE);
      break;

      case 4:
      CircuitPlayground.speaker.say(spFOUR);
      break;

      case 5:
      CircuitPlayground.speaker.say(spFIVE);
      break;

      case 6:
      CircuitPlayground.speaker.say(spSIX);
      break;

      case 7:
      CircuitPlayground.speaker.say(spSEVEN);
      break;


    }
    delay(500);
  }
}

//if the game ends for any reason, the score is indicated using the LEDs
void gameOver(){
  gameRunning=0;
  Serial.println("Game Over");
  //If the game is not fully complete, RED LEDs show the score.
  if (score<10){
    for (int i =0; i<score; i++){
      CircuitPlayground.setPixelColor(i, 255, 0, 0);
      delay(200);
    }
  }
  //If the game is won, all GREEN LEDs are lit
  else if (score>9){
    for (int i =0; i<10; i++){
      CircuitPlayground.setPixelColor(i, 0, 255, 0);
      delay(200);
    }
  }

  //Add score Reader Later
}

void AbuttonISR(){
ResetFlag = 1;
}

void BbuttonISR(){
FinishFlag = 1;
}